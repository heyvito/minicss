# frozen_string_literal: true

# Autogenerated code. This code was generated by bin/gen-specs.rb. DO NOT EDIT.
# Edits will be lost once the generator is run again.

RSpec.describe "css-parsing-tests: component_value_list.json" do
  it "parses \"\"" do
    style = ""
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      empty!
    end
  end

  it "parses \"/*/*///** /* **/*//* \"" do
    style = "/*/*///** /* **/*//* "
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      string "/"
      string "*"
      string "/"
    end
  end

  it "parses \"red\"" do
    style = "red"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "red"
    end
  end

  it "parses \"  \\t\\t\\r\\n\\nRed \"" do
    style = "  \t\t\r\n\nRed "
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      string " "
      ident "Red"
      string " "
    end
  end

  it "parses \"red/* CDC */-->\"" do
    style = "red/* CDC */-->"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "red"
      string "-->"
    end
  end

  it "parses \"red-->/* Not CDC */\"" do
    style = "red-->/* Not CDC */"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "red--"
      string ">"
    end
  end

  it "parses \"\\\\- red0 -red --red -\\\\-red\\\\ blue 0red -0red \\x00red _Red .red r\\u00EAd r\\\\\\u00EAd \\x7F\\u0080\\u0081\"" do
    style = "\\- red0 -red --red -\\-red\\ blue 0red -0red \x00red _Red .red r\u00EAd r\\\u00EAd \x7F\u0080\u0081"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "-"
      string " "
      ident "red0"
      string " "
      ident "-red"
      string " "
      ident "--red"
      string " "
      ident "--red blue"
      string " "
      dimension(0, :integer, "red")
      string " "
      dimension(0, :integer, "red")
      string " "
      ident "�red"
      string " "
      ident "_Red"
      string " "
      string "."
      ident "red"
      string " "
      ident "rêd"
      string " "
      ident "rêd"
      string " "
      string "\u007F"
      ident "\u0080\u0081"
    end
  end

  it "parses \"\\\\30red \\\\00030 red \\\\30\\r\\nred \\\\0000000red \\\\1100000red \\\\red \\\\r ed \\\\.red \\\\ red \\\\\\nred \\\\376\\\\37 6\\\\000376\\\\0000376\\\\\"" do
    style = "\\30red \\00030 red \\30\r\nred \\0000000red \\1100000red \\red \\r ed \\.red \\ red \\\nred \\376\\37 6\\000376\\0000376\\"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "0red"
      string " "
      ident "0red"
      string " "
      ident "0red"
      string " "
      ident "�0red"
      string " "
      ident "�0red"
      string " "
      ident "red"
      string " "
      ident "r"
      string " "
      ident "ed"
      string " "
      ident ".red"
      string " "
      ident " red"
      string " "
      string "\\"
      string " "
      ident "red"
      string " "
      ident "Ͷ76Ͷ76�"
    end
  end

  it "parses \"rgba0('a' rgba1(a b rgba2(rgba3('b\"" do
    style = "rgba0('a' rgba1(a b rgba2(rgba3('b"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("rgba0") do
        string "a"
        string " "
        function("rgba1") do
          ident "a"
          string " "
          ident "b"
          string " "
          function("rgba2") do
            function("rgba3") do
              string "b"
              consume_error("eof-in-string")
            end
          end
        end
      end
    end
  end

  it "parses \"rgba0() -rgba() --rgba() -\\\\-rgba() 0rgba() -0rgba() _rgba() .rgba() rgb\\u00E2() \\\\30rgba() rgba () @rgba() #rgba()\"" do
    style = "rgba0() -rgba() --rgba() -\\-rgba() 0rgba() -0rgba() _rgba() .rgba() rgb\u00E2() \\30rgba() rgba () @rgba() #rgba()"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("rgba0") do
        empty!
      end
      string " "
      function("-rgba") do
        empty!
      end
      string " "
      function("--rgba") do
        empty!
      end
      string " "
      function("--rgba") do
        empty!
      end
      string " "
      dimension(0, :integer, "rgba")
      block("(") do
        empty!
      end
      string " "
      dimension(0, :integer, "rgba")
      block("(") do
        empty!
      end
      string " "
      function("_rgba") do
        empty!
      end
      string " "
      string "."
      function("rgba") do
        empty!
      end
      string " "
      function("rgb\u00E2") do
        empty!
      end
      string " "
      function("0rgba") do
        empty!
      end
      string " "
      ident "rgba"
      string " "
      block("(") do
        empty!
      end
      string " "
      at_keyword("rgba")
      block("(") do
        empty!
      end
      string " "
      hash_keyword("rgba")
      block("(") do
        empty!
      end
    end
  end

  it "parses \"@media0 @-Media @--media @-\\\\-media @0media @-0media @_media @.media @med\\u0130a @\\\\30 media\\\\\"" do
    style = "@media0 @-Media @--media @-\\-media @0media @-0media @_media @.media @med\u0130a @\\30 media\\"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_keyword("media0")
      string " "
      at_keyword("-Media")
      string " "
      at_keyword("--media")
      string " "
      at_keyword("--media")
      string " "
      string "@"
      dimension(0, :integer, "media")
      string " "
      string "@"
      dimension(0, :integer, "media")
      string " "
      at_keyword("_media")
      string " "
      string "@"
      string "."
      ident "media"
      string " "
      at_keyword("med\u0130a")
      string " "
      at_keyword("0media\uFFFD")
    end
  end

  it "parses \"#red0 #-Red #--red #-\\\\-red #0red #-0red #_Red #.red #r\\u00EAd #\\u00EArd #\\\\.red\\\\\"" do
    style = "#red0 #-Red #--red #-\\-red #0red #-0red #_Red #.red #r\u00EAd #\u00EArd #\\.red\\"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      hash_keyword("red0")
      string " "
      hash_keyword("-Red")
      string " "
      hash_keyword("--red")
      string " "
      hash_keyword("--red")
      string " "
      hash_keyword("0red")
      string " "
      hash_keyword("-0red")
      string " "
      hash_keyword("_Red")
      string " "
      string "#"
      string "."
      ident "red"
      string " "
      hash_keyword("r\u00EAd")
      string " "
      hash_keyword("\u00EArd")
      string " "
      hash_keyword(".red\uFFFD")
    end
  end

  it "parses \"p[example=\\\"\\\\\\nfoo(int x) {\\\\\\n   this.x = x;\\\\\\n}\\\\\\n\\\"]\"" do
    style = "p[example=\"\\\nfoo(int x) {\\\n   this.x = x;\\\n}\\\n\"]"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "p"
      block("[") do
        ident "example"
        string "="
        string "foo(int x) {   this.x = x;}"
      end
    end
  end

  it "parses \"'' 'Lorem \\\"\\u00EEpsum\\\"' 'a\\\\\\nb' 'a\\nb 'eof\"" do
    style = "'' 'Lorem \"\u00EEpsum\"' 'a\\\nb' 'a\nb 'eof"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      string ""
      string " "
      string "Lorem \"îpsum\""
      string " "
      string "ab"
      string " "
      consume_error("bad-string")
      string " "
      ident "b"
      string " "
      string "eof"
      consume_error("eof-in-string")
    end
  end

  it "parses \"\\\"\\\" \\\"Lorem '\\u00EEpsum'\\\" \\\"a\\\\\\nb\\\" \\\"a\\nb \\\"eof\"" do
    style = "\"\" \"Lorem '\u00EEpsum'\" \"a\\\nb\" \"a\nb \"eof"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      string ""
      string " "
      string "Lorem 'îpsum'"
      string " "
      string "ab"
      string " "
      consume_error("bad-string")
      string " "
      ident "b"
      string " "
      string "eof"
      consume_error("eof-in-string")
    end
  end

  it "parses \"\\\"Lo\\\\rem \\\\130 ps\\\\u m\\\" '\\\\376\\\\37 6\\\\000376\\\\0000376\\\\\"" do
    style = "\"Lo\\rem \\130 ps\\u m\" '\\376\\37 6\\000376\\0000376\\"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      string "Lorem İpsu m"
      string " "
      string "Ͷ76Ͷ76"
      consume_error("eof-in-string")
    end
  end

  it "parses \"url( '') url('Lorem \\\"\\u00EEpsum\\\"'\\n) url('a\\\\\\nb' ) url('a\\nb) url('eof\"" do
    style = "url( '') url('Lorem \"\u00EEpsum\"'\n) url('a\\\nb' ) url('a\nb) url('eof"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("url") do
        string " "
        string ""
      end
      string " "
      function("url") do
        string "Lorem \"îpsum\""
        string " "
      end
      string " "
      function("url") do
        string "ab"
        string " "
      end
      string " "
      function("url") do
        consume_error("bad-string")
        string " "
        ident "b"
      end
      string " "
      function("url") do
        string "eof"
        consume_error("eof-in-string")
      end
    end
  end

  it "parses \"url(\"" do
    style = "url("
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      url("")
      consume_error("eof-in-url")
    end
  end

  it "parses \"url( \\t\"" do
    style = "url( \t"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      url("")
      consume_error("eof-in-url")
    end
  end

  it "parses \"url(\\\"\\\") url(\\\"Lorem '\\u00EEpsum'\\\"\\n) url(\\\"a\\\\\\nb\\\" ) url(\\\"a\\nb) url(\\\"eof\"" do
    style = "url(\"\") url(\"Lorem '\u00EEpsum'\"\n) url(\"a\\\nb\" ) url(\"a\nb) url(\"eof"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("url") do
        string ""
      end
      string " "
      function("url") do
        string "Lorem 'îpsum'"
        string " "
      end
      string " "
      function("url") do
        string "ab"
        string " "
      end
      string " "
      function("url") do
        consume_error("bad-string")
        string " "
        ident "b"
      end
      string " "
      function("url") do
        string "eof"
        consume_error("eof-in-string")
      end
    end
  end

  it "parses \"url(\\\"Lo\\\\rem \\\\130 ps\\\\u m\\\") url('\\\\376\\\\37 6\\\\000376\\\\0000376\\\\\"" do
    style = "url(\"Lo\\rem \\130 ps\\u m\") url('\\376\\37 6\\000376\\0000376\\"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("url") do
        string "Lorem İpsu m"
      end
      string " "
      function("url") do
        string "Ͷ76Ͷ76"
        consume_error("eof-in-string")
      end
    end
  end

  it "parses \"URL(foo) Url(foo) \\u00FBrl(foo) url (foo) url\\\\ (foo) url(\\t 'foo' \"" do
    style = "URL(foo) Url(foo) \u00FBrl(foo) url (foo) url\\ (foo) url(\t 'foo' "
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      url("foo")
      string " "
      url("foo")
      string " "
      function("\u00FBrl") do
        ident "foo"
      end
      string " "
      ident "url"
      string " "
      block("(") do
        ident "foo"
      end
      string " "
      function("url ") do
        ident "foo"
      end
      string " "
      function("url") do
        string " "
        string "foo"
        string " "
      end
    end
  end

  it "parses \"url('a' b) url('c' d)\"" do
    style = "url('a' b) url('c' d)"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("url") do
        string "a"
        string " "
        ident "b"
      end
      string " "
      function("url") do
        string "c"
        string " "
        ident "d"
      end
    end
  end

  it "parses \"url('a\\nb) url('c\\n\"" do
    style = "url('a\nb) url('c\n"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      function("url") do
        consume_error("bad-string")
        string " "
        ident "b"
      end
      string " "
      function("url") do
        consume_error("bad-string")
        string " "
      end
    end
  end

  it "parses \"url() url( \\t) url(\\n Fo\\u00F4\\\\030\\n!\\n) url(\\na\\nb\\n) url(a\\\\ b) url(a(b) url(a\\\\(b) url(a'b) url(a\\\\'b) url(a\\\"b) url(a\\\\\\\"b) url(a\\nb) url(a\\\\\\nb) url(a\\\\a b) url(a\\\\\"" do
    style = "url() url( \t) url(\n Fo\u00F4\\030\n!\n) url(\na\nb\n) url(a\\ b) url(a(b) url(a\\(b) url(a'b) url(a\\'b) url(a\"b) url(a\\\"b) url(a\nb) url(a\\\nb) url(a\\a b) url(a\\"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      url("")
      string " "
      url("")
      string " "
      url("Fo\u00F40!")
      string " "
      consume_error("bad-url")
      string " "
      url("a b")
      string " "
      consume_error("bad-url")
      string " "
      url("a(b")
      string " "
      consume_error("bad-url")
      string " "
      url("a'b")
      string " "
      consume_error("bad-url")
      string " "
      url("a\"b")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      url("a\nb")
      string " "
      url("a\uFFFD")
      consume_error("eof-in-url")
    end
  end

  it "parses \"url(\\x00!\\\#$%&*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u0080\\u0081\\u009E\\u009F\\u00A0\\u00A1\\u00A2\"" do
    style = "url(\x00!\#$%&*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0080\u0081\u009E\u009F\u00A0\u00A1\u00A2"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      url("\uFFFD!\#$%&*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0080\u0081\u009E\u009F\u00A0\u00A1\u00A2")
      consume_error("eof-in-url")
    end
  end

  it "parses \"url(\\x01) url(\\x02) url(\\x03) url(\\x04) url(\\x05) url(\\x06) url(\\a) url(\\b) url(\\v) url(\\x0E) url(\\x0F) url(\\x10) url(\\x11) url(\\x12) url(\\x13) url(\\x14) url(\\x15) url(\\x16) url(\\x17) url(\\x18) url(\\x19) url(\\x1A) url(\\e) url(\\x1C) url(\\x1D) url(\\x1E) url(\\x1F) url(\\x7F)\"" do
    style = "url(\x01) url(\x02) url(\x03) url(\x04) url(\x05) url(\x06) url(\a) url(\b) url(\v) url(\x0E) url(\x0F) url(\x10) url(\x11) url(\x12) url(\x13) url(\x14) url(\x15) url(\x16) url(\x17) url(\x18) url(\x19) url(\x1A) url(\e) url(\x1C) url(\x1D) url(\x1E) url(\x1F) url(\x7F)"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
      string " "
      consume_error("bad-url")
    end
  end

  it "parses \"12 +34 -45 .67 +.89 -.01 2.3 +45.0 -0.67\"" do
    style = "12 +34 -45 .67 +.89 -.01 2.3 +45.0 -0.67"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      number 12, :integer
      string " "
      number 34, :integer
      string " "
      number -45, :integer
      string " "
      number 0.67, :number
      string " "
      number 0.89, :number
      string " "
      number -0.01, :number
      string " "
      number 2.3, :number
      string " "
      number 45, :number
      string " "
      number -0.67, :number
    end
  end

  it "parses \"12e2 +34e+1 -45E-0 .68e+3 +.79e-1 -.01E2 2.3E+1 +45.0e6 -0.67e0\"" do
    style = "12e2 +34e+1 -45E-0 .68e+3 +.79e-1 -.01E2 2.3E+1 +45.0e6 -0.67e0"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      number 1200, :number
      string " "
      number 340, :number
      string " "
      number -45, :number
      string " "
      number 680, :number
      string " "
      number 0.079, :number
      string " "
      number -1, :number
      string " "
      number 23, :number
      string " "
      number 45000000, :number
      string " "
      number -0.67, :number
    end
  end

  it "parses \"3. /* Decimal point must have following digits */\"" do
    style = "3. /* Decimal point must have following digits */"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      number 3, :integer
      string "."
      string " "
    end
  end

  it "parses \"3\\\\65-2 /* Scientific notation E can not be escaped */\"" do
    style = "3\\65-2 /* Scientific notation E can not be escaped */"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      dimension(3, :integer, "e-2")
      string " "
    end
  end

  it "parses \"3e-2.1 /* Integer exponents only */\"" do
    style = "3e-2.1 /* Integer exponents only */"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      number 0.03, :number
      number 0.1, :number
      string " "
    end
  end

  it "parses \"12% +34% -45% .67% +.89% -.01% 2.3% +45.0% -0.67%\"" do
    style = "12% +34% -45% .67% +.89% -.01% 2.3% +45.0% -0.67%"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      percentage(12, :integer)
      string " "
      percentage(34, :integer)
      string " "
      percentage(-45, :integer)
      string " "
      percentage(0.67, :number)
      string " "
      percentage(0.89, :number)
      string " "
      percentage(-0.01, :number)
      string " "
      percentage(2.3, :number)
      string " "
      percentage(45, :number)
      string " "
      percentage(-0.67, :number)
    end
  end

  it "parses \"12e2% +34e+1% -45E-0% .68e+3% +.79e-1% -.01E2% 2.3E+1% +45.0e6% -0.67e0%\"" do
    style = "12e2% +34e+1% -45E-0% .68e+3% +.79e-1% -.01E2% 2.3E+1% +45.0e6% -0.67e0%"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      percentage(1200, :number)
      string " "
      percentage(340, :number)
      string " "
      percentage(-45, :number)
      string " "
      percentage(680, :number)
      string " "
      percentage(0.079, :number)
      string " "
      percentage(-1, :number)
      string " "
      percentage(23, :number)
      string " "
      percentage(45000000, :number)
      string " "
      percentage(-0.67, :number)
    end
  end

  it "parses \"12\\\\% /* Percent sign can not be escaped */\"" do
    style = "12\\% /* Percent sign can not be escaped */"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      dimension(12, :integer, "%")
      string " "
    end
  end

  it "parses \"12px +34px -45px .67px +.89px -.01px 2.3px +45.0px -0.67px\"" do
    style = "12px +34px -45px .67px +.89px -.01px 2.3px +45.0px -0.67px"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      dimension(12, :integer, "px")
      string " "
      dimension(34, :integer, "px")
      string " "
      dimension(-45, :integer, "px")
      string " "
      dimension(0.67, :number, "px")
      string " "
      dimension(0.89, :number, "px")
      string " "
      dimension(-0.01, :number, "px")
      string " "
      dimension(2.3, :number, "px")
      string " "
      dimension(45, :number, "px")
      string " "
      dimension(-0.67, :number, "px")
    end
  end

  it "parses \"12e2px +34e+1px -45E-0px .68e+3px +.79e-1px -.01E2px 2.3E+1px +45.0e6px -0.67e0px\"" do
    style = "12e2px +34e+1px -45E-0px .68e+3px +.79e-1px -.01E2px 2.3E+1px +45.0e6px -0.67e0px"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      dimension(1200, :number, "px")
      string " "
      dimension(340, :number, "px")
      string " "
      dimension(-45, :number, "px")
      string " "
      dimension(680, :number, "px")
      string " "
      dimension(0.079, :number, "px")
      string " "
      dimension(-1, :number, "px")
      string " "
      dimension(23, :number, "px")
      string " "
      dimension(45000000, :number, "px")
      string " "
      dimension(-0.67, :number, "px")
    end
  end

  it "parses \"12red0 12.0-red 12--red 12-\\\\-red 120red 12-0red 12\\x00red 12_Red 12.red 12r\\u00EAd\"" do
    style = "12red0 12.0-red 12--red 12-\\-red 120red 12-0red 12\x00red 12_Red 12.red 12r\u00EAd"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      dimension(12, :integer, "red0")
      string " "
      dimension(12, :number, "-red")
      string " "
      dimension(12, :integer, "--red")
      string " "
      dimension(12, :integer, "--red")
      string " "
      dimension(120, :integer, "red")
      string " "
      number 12, :integer
      dimension(0, :integer, "red")
      string " "
      dimension(12, :integer, "\uFFFDred")
      string " "
      dimension(12, :integer, "_Red")
      string " "
      number 12, :integer
      string "."
      ident "red"
      string " "
      dimension(12, :integer, "r\u00EAd")
    end
  end

  it "parses \"u+1 U+10 U+100 U+1000 U+10000 U+100000 U+1000000\"" do
    style = "u+1 U+10 U+100 U+1000 U+10000 U+100000 U+1000000"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(1, 1)
      string " "
      unicode_range(16, 16)
      string " "
      unicode_range(256, 256)
      string " "
      unicode_range(4096, 4096)
      string " "
      unicode_range(65536, 65536)
      string " "
      unicode_range(1048576, 1048576)
      string " "
      unicode_range(1048576, 1048576)
      number 0, :integer
    end
  end

  it "parses \"u+? u+1? U+10? U+100? U+1000? U+10000? U+100000?\"" do
    style = "u+? u+1? U+10? U+100? U+1000? U+10000? U+100000?"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(0, 15)
      string " "
      unicode_range(16, 31)
      string " "
      unicode_range(256, 271)
      string " "
      unicode_range(4096, 4111)
      string " "
      unicode_range(65536, 65551)
      string " "
      unicode_range(1048576, 1048591)
      string " "
      unicode_range(1048576, 1048576)
      string "?"
    end
  end

  it "parses \"u+?? U+1?? U+10?? U+100?? U+1000?? U+10000??\"" do
    style = "u+?? U+1?? U+10?? U+100?? U+1000?? U+10000??"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(0, 255)
      string " "
      unicode_range(256, 511)
      string " "
      unicode_range(4096, 4351)
      string " "
      unicode_range(65536, 65791)
      string " "
      unicode_range(1048576, 1048831)
      string " "
      unicode_range(1048576, 1048591)
      string "?"
    end
  end

  it "parses \"u+??? U+1??? U+10??? U+100??? U+1000???\"" do
    style = "u+??? U+1??? U+10??? U+100??? U+1000???"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(0, 4095)
      string " "
      unicode_range(4096, 8191)
      string " "
      unicode_range(65536, 69631)
      string " "
      unicode_range(1048576, 1052671)
      string " "
      unicode_range(1048576, 1048831)
      string "?"
    end
  end

  it "parses \"u+???? U+1???? U+10???? U+100????\"" do
    style = "u+???? U+1???? U+10???? U+100????"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(0, 65535)
      string " "
      unicode_range(65536, 131071)
      string " "
      unicode_range(1048576, 1114111)
      string " "
      unicode_range(1048576, 1052671)
      string "?"
    end
  end

  it "parses \"u+????? U+1????? U+10?????\"" do
    style = "u+????? U+1????? U+10?????"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(0, 1048575)
      string " "
      unicode_range(1048576, 2097151)
      string " "
      unicode_range(1048576, 1114111)
      string "?"
    end
  end

  it "parses \"u+?????? U+1??????\"" do
    style = "u+?????? U+1??????"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(0, 16777215)
      string " "
      unicode_range(1048576, 2097151)
      string "?"
    end
  end

  it "parses \"u+1-2 U+100000-2 U+1000000-2 U+10-200000\"" do
    style = "u+1-2 U+100000-2 U+1000000-2 U+10-200000"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      unicode_range(1, 2)
      string " "
      unicode_range(1048576, 2)
      string " "
      unicode_range(1048576, 1048576)
      number 0, :integer
      number -2, :integer
      string " "
      unicode_range(16, 2097152)
    end
  end

  it "parses \"\\u00F9+12 \\u00DC+12 u +12 U+ 12 U+12 - 20 U+1?2 U+1?-50\"" do
    style = "\u00F9+12 \u00DC+12 u +12 U+ 12 U+12 - 20 U+1?2 U+1?-50"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "ù"
      number 12, :integer
      string " "
      ident "Ü"
      number 12, :integer
      string " "
      ident "u"
      string " "
      number 12, :integer
      string " "
      ident "U"
      string "+"
      string " "
      number 12, :integer
      string " "
      unicode_range(18, 18)
      string " "
      string "-"
      string " "
      number 20, :integer
      string " "
      unicode_range(16, 31)
      number 2, :integer
      string " "
      unicode_range(16, 31)
      number -50, :integer
    end
  end

  it "parses \"~=|=^=$=*=||<!------> |/**/| ~/**/=\"" do
    style = "~=|=^=$=*=||<!------> |/**/| ~/**/="
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      string "~"
      string "="
      string "|"
      string "="
      string "^"
      string "="
      string "$"
      string "="
      string "*"
      string "="
      string "|"
      string "|"
      string "<!--"
      ident "----"
      string ">"
      string " "
      string "|"
      string "|"
      string " "
      string "~"
      string "="
    end
  end

  it "parses \"a:not([href^=http\\\\:],  [href ^=\\t'https\\\\:'\\n]) { color: rgba(0%, 100%, 50%); }\"" do
    style = "a:not([href^=http\\:],  [href ^=\t'https\\:'\n]) { color: rgba(0%, 100%, 50%); }"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      ident "a"
      string ":"
      function("not") do
        block("[") do
          ident "href"
          string "^"
          string "="
          ident "http:"
        end
        string ","
        string " "
        block("[") do
          ident "href"
          string " "
          string "^"
          string "="
          string " "
          string "https:"
          string " "
        end
      end
      string " "
      block("{") do
        string " "
        ident "color"
        string ":"
        string " "
        function("rgba") do
          percentage(0, :integer)
          string ","
          string " "
          percentage(100, :integer)
          string ","
          string " "
          percentage(50, :integer)
        end
        string ";"
        string " "
      end
    end
  end

  it "parses \"@media print { (foo]{bar) }baz\"" do
    style = "@media print { (foo]{bar) }baz"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = par.parse_component_value_list
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_keyword("media")
      string " "
      ident "print"
      string " "
      block("{") do
        string " "
        block("(") do
          ident "foo"
          string "]"
          block("{") do
            ident "bar"
            string ")"
            string " "
          end
          ident "baz"
        end
      end
    end
  end

end