# frozen_string_literal: true

# Autogenerated code. This code was generated by bin/gen-specs.rb. DO NOT EDIT.
# Edits will be lost once the generator is run again.

RSpec.describe "css-parsing-tests: one_rule.json" do
  it "parses \"\"" do
    style = ""
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("empty")
    end
  end

  it "parses \"foo\"" do
    style = "foo"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("invalid")
    end
  end

  it "parses \"foo 4\"" do
    style = "foo 4"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("invalid")
    end
  end

  it "parses \"@foo\"" do
    style = "@foo"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_rule("foo") do
        prelude do
          empty!
        end
      end
    end
  end

  it "parses \"@foo bar; \\t/* comment */\"" do
    style = "@foo bar; \t/* comment */"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_rule("foo") do
        prelude do
          ident "bar"
        end
      end
    end
  end

  it "parses \" /**/ @foo bar{[(4\"" do
    style = " /**/ @foo bar{[(4"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_rule("foo") do
        prelude do
          ident "bar"
        end
      end
    end
  end

  it "parses \"@foo { bar\"" do
    style = "@foo { bar"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_rule("foo") do
        prelude do
          empty!
        end
      end
    end
  end

  it "parses \"@foo [ bar\"" do
    style = "@foo [ bar"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      at_rule("foo") do
        prelude do
          block("[") do
            string " "
            ident "bar"
          end
        end
      end
    end
  end

  it "parses \" /**/ div > p { color: #aaa;  } /**/ \"" do
    style = " /**/ div > p { color: #aaa;  } /**/ "
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      q_rule do
        prelude do
          ident "div"
          string " "
          string ">"
          string " "
          ident "p"
        end
        body do
          decl("color", important: false) do
            string "#aaa"
          end
        end
      end
    end
  end

  it "parses \" /**/ { color: #aaa  \"" do
    style = " /**/ { color: #aaa  "
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      q_rule do
        prelude do
          empty!
        end
        body do
          decl("color", important: false) do
            string "#aaa"
          end
        end
      end
    end
  end

  it "parses \" /* CDO/CDC are not special */ <!-- --> {\"" do
    style = " /* CDO/CDC are not special */ <!-- --> {"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      q_rule do
        prelude do
          string "<!--"
          string " "
          string "-->"
          string " "
        end
        body do
          empty!
        end
      end
    end
  end

  it "parses \"div { color: #aaa; } p{}\"" do
    style = "div { color: #aaa; } p{}"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("extra-input")
    end
  end

  it "parses \"div {} -->\"" do
    style = "div {} -->"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("extra-input")
    end
  end

  it "parses \"{}a\"" do
    style = "{}a"
    tok = TinyCSS::CSS::Tokenizer.new(style, allow_unicode_ranges: true)
    tok.tokenize
    par = TinyCSS::CSS::Parser.new(tok.tokens)
    sheet = [par.parse_rule]
    r = TinyCSS::AST.convert(sheet)

    match_ast(r) do
      consume_error("extra-input")
    end
  end

end